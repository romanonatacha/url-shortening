{"version":3,"sources":["components/Button/Button.js","components/Output/Output.js","utils/copyToClipboard.js","components/Input/Input.js","components/Header/Header.js","components/Footer/Footer.js","components/Hero/Hero.js","App.js","serviceWorker.js","index.js"],"names":["Button","title","action","variant","onClick","type","className","Output","hashid","url","useState","copyState","setCopyState","shortlink","length","substr","href","event","preventDefault","link","cb","hiddenInput","document","createElement","body","appendChild","value","select","execCommand","removeChild","copyToClipboard","target","classList","add","setTimeout","querySelector","remove","Input","setLink","error","setError","loading","setLoading","data","setData","console","log","JSON","stringify","handleSubmit","a","fetch","method","headers","response","json","result","ok","localStorage","setItem","onSubmit","id","aria-label","onChange","placeholder","map","item","index","key","Header","Footer","rel","Hero","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c4dab136.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.scss'\n\nconst Button = ({ title, action, variant }) => {\n    return (\n        <button\n            onClick={action || null}\n            type={`${action ? 'button' : 'submit'}`}\n            className={`btn ${variant || ''}`}\n        >\n            {title}\n        </button>\n    )\n}\n\nexport default Button","import React, { useState } from 'react';\nimport { copyToClipboard } from '../../utils/copyToClipboard';\nimport Button from '../Button/Button';\nimport './Output.scss';\n\nconst Output = ({ hashid, url }) => {\n    const [copyState, setCopyState] = useState(false);\n    const shortlink = `https://rel.ink/${hashid}`;\n\n    const handleCopy = (event) => {\n        event.preventDefault();\n        copyToClipboard(shortlink, setCopyState);\n        event.target.classList.add('btn-copied');\n        setTimeout(() => {\n            setCopyState(false);\n            document.querySelector('.btn-copied').classList.remove('btn-copied');\n        }, 2000);\n    };\n\n    return (\n        <div className=\"output\">\n            <div className=\"output_link\">\n                {url.length > 30 ? `${url.substr(0, 30)}...` : url}\n            </div>\n            <div>\n                <a href={shortlink} className=\"output_result\">\n                    {shortlink}\n                </a>\n                <Button\n                    title={copyState ? 'Copied!' : 'Copy'}\n                    variant=\"btn-copy\"\n                    action={handleCopy}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Output","export const copyToClipboard = (link, cb) => {\n    const hiddenInput = document.createElement('input');\n    document.body.appendChild(hiddenInput);\n    hiddenInput.value = link;\n    hiddenInput.select();\n    document.execCommand('copy');\n    cb(true);\n    document.body.removeChild(hiddenInput);\n}","import React, { useState } from 'react'\nimport Output from '../Output/Output'\nimport Button from '../Button/Button'\nimport './Input.scss'\n\nconst Input = () => {\n    const [link, setLink] = useState('')\n    const [error, setError] = useState(null)\n    const [loading, setLoading] = useState(null)\n    const [data, setData] = useState([])\n\n    console.log('DATA ' + JSON.stringify(data))\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n        // if (!link) {\n        //     setError('you need to add a link')\n        //     document.querySelector('.input_form_input').classList.add('input_form_input-error')\n        //     return\n        // }\n        try {\n            setError('')\n            setLoading(true)\n            const response = await fetch('https://rel.ink/api/links/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ url: link }),\n            })\n            const result = await response.json()\n            if (!response.ok) {\n                setError(result.url)\n                return\n            }\n\n            localStorage.setItem(result.hashid, JSON.stringify(result))\n            setData([result, ...data])\n            console.log('DATA ' + JSON.stringify(data))\n\n            setLoading(false)\n            setLink('')\n        } catch (error) {\n            setError('Error shortening link. Try again later')\n            setLoading(false)\n        }\n    }\n\n    return (\n        <div className=\"input\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"input_form\">\n                    {/* <label className=\"input_form_label\" htmlFor=\"link\" aria-hidden=\"true\">\n                        Shorten Link\n                    </label> */}\n                    <input\n                        id=\"link\"\n                        aria-label=\"short link\"\n                        type=\"text\"\n                        value={link}\n                        onChange={(event) => setLink(event.target.value)}\n                        className={`input_form_input ${error ? 'input_form_input-error' : ''}`}\n                        placeholder=\"enter here a link to shorten\"\n                    />\n                    <p className=\"input_error\">{error}</p>\n                </div>\n                <Button\n                    title={`${loading && !error ? 'Loading...' : 'Shorten It!'}`}\n                    variant={`${loading && !error ? 'btn-shorten btn-loading' : 'btn-shorten'}`}\n                />\n            </form>\n            {data.map((item, index) => (\n                item !== null &&\n                <Output key={index} hashid={item.hashid} url={item.url} />\n\n            ))}\n        </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport './Header.scss'\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <div className=\"boxed\">\n                <span className=\"header_logo\">\n                    trich.ai\n                </span>\n                <span>\n                    shorturl\n                </span>\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\nimport './Footer.scss'\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"boxed footer\">\n                <div>\n                    <a href=\"https://romanonatacha.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        developed by <span>natacha romano</span>\n                    </a>\n                </div>\n                <div className=\"divider\"> | </div>\n                <div>\n                    <a href=\"https://trich.ai\" target=\"_blank\" rel=\"noopener noreferrer\">\n                        powered by <span>trich.ai</span>\n                    </a>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport Input from '../Input/Input'\nimport Header from '../Header/Header'\nimport './Hero.scss'\nimport Footer from '../Footer/Footer'\n\nconst Hero = () => {\n    return (\n        <>\n            <Header />\n            <div className=\"hero\">\n                <div className=\"boxed\">\n                    <div className=\"hero_title\">url shortener</div>\n                    <Input />\n                </div>\n            </div>\n            <Footer />\n        </>\n    )\n}\n\nexport default Hero","import React from 'react'\nimport Hero from './components/Hero/Hero'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Hero />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}